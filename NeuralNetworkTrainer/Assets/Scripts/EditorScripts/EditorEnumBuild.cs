//#if UNITY_EDITOR
using UnityEditor;
using UnityEngine;
using System.IO;
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

[InitializeOnLoadAttribute]
public class EnumGeneration
{
    const string enumName = "DataCreationType";
    const string filePath = "Assets/Scripts/AutoGeneratedScirpts/DataCreationTypes/";

    static EnumGeneration()
    {
        GenerateEnum(false);
    }

    [MenuItem("Tools/GenerateDataCreationEnum")]
    public static void GenerateDataCreationEnum()
    {
        GenerateEnum(true);
    }

    public static void GenerateEnum(bool logNotUpdate = true)
    {
        string file = "public enum " + enumName + "{";

        foreach (string val in GetEnumValues())
        {
            file += "\n" + val + ",";
        }

        file += "\n}";

        if (FileHandler.ReadFromFile(enumName + ".cs", filePath) == file)
        {
            if (logNotUpdate) Debug.Log(enumName + " enum is already up to date!");
            return;
        }

        FileHandler.WriteToFile(file, enumName + ".cs", filePath);

        AssetDatabase.Refresh();
        Debug.Log(enumName + " enum is up to date!");
    }

    public static List<string> GetEnumValues()
    {
        return GetDataCreationTypes().Select(t => t.Name).ToList();
    }

    public static List<Type> GetDataCreationTypes()
    {
        return GetAllInheritedClassTypesOfType(typeof(DataCreationJob));
    }

    public static List<Type> GetAllInheritedClassTypesOfType(Type baseClass) 
    {
        List<Type> types = new List<Type>();
        foreach (Type type in Assembly.GetAssembly(baseClass).GetTypes().Where(myType => myType.IsClass && !myType.IsAbstract && myType.IsSubclassOf(baseClass)))
        {
            types.Add(type);
        }
        return types;
    }
}


